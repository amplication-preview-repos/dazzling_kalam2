/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { WasteCollectionRequestService } from "../wasteCollectionRequest.service";
import { WasteCollectionRequestCreateInput } from "./WasteCollectionRequestCreateInput";
import { WasteCollectionRequest } from "./WasteCollectionRequest";
import { WasteCollectionRequestFindManyArgs } from "./WasteCollectionRequestFindManyArgs";
import { WasteCollectionRequestWhereUniqueInput } from "./WasteCollectionRequestWhereUniqueInput";
import { WasteCollectionRequestUpdateInput } from "./WasteCollectionRequestUpdateInput";

export class WasteCollectionRequestControllerBase {
  constructor(protected readonly service: WasteCollectionRequestService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: WasteCollectionRequest })
  async createWasteCollectionRequest(
    @common.Body() data: WasteCollectionRequestCreateInput
  ): Promise<WasteCollectionRequest> {
    return await this.service.createWasteCollectionRequest({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,
        location: true,
        requestedAt: true,
        status: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [WasteCollectionRequest] })
  @ApiNestedQuery(WasteCollectionRequestFindManyArgs)
  async wasteCollectionRequests(
    @common.Req() request: Request
  ): Promise<WasteCollectionRequest[]> {
    const args = plainToClass(
      WasteCollectionRequestFindManyArgs,
      request.query
    );
    return this.service.wasteCollectionRequests({
      ...args,
      select: {
        createdAt: true,
        id: true,
        location: true,
        requestedAt: true,
        status: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: WasteCollectionRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async wasteCollectionRequest(
    @common.Param() params: WasteCollectionRequestWhereUniqueInput
  ): Promise<WasteCollectionRequest | null> {
    const result = await this.service.wasteCollectionRequest({
      where: params,
      select: {
        createdAt: true,
        id: true,
        location: true,
        requestedAt: true,
        status: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: WasteCollectionRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateWasteCollectionRequest(
    @common.Param() params: WasteCollectionRequestWhereUniqueInput,
    @common.Body() data: WasteCollectionRequestUpdateInput
  ): Promise<WasteCollectionRequest | null> {
    try {
      return await this.service.updateWasteCollectionRequest({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,
          location: true,
          requestedAt: true,
          status: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: WasteCollectionRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteWasteCollectionRequest(
    @common.Param() params: WasteCollectionRequestWhereUniqueInput
  ): Promise<WasteCollectionRequest | null> {
    try {
      return await this.service.deleteWasteCollectionRequest({
        where: params,
        select: {
          createdAt: true,
          id: true,
          location: true,
          requestedAt: true,
          status: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
