/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  WasteCollectionRequest as PrismaWasteCollectionRequest,
  User as PrismaUser,
} from "@prisma/client";

export class WasteCollectionRequestServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.WasteCollectionRequestCountArgs, "select">
  ): Promise<number> {
    return this.prisma.wasteCollectionRequest.count(args);
  }

  async wasteCollectionRequests<
    T extends Prisma.WasteCollectionRequestFindManyArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.WasteCollectionRequestFindManyArgs>
  ): Promise<PrismaWasteCollectionRequest[]> {
    return this.prisma.wasteCollectionRequest.findMany<Prisma.WasteCollectionRequestFindManyArgs>(
      args
    );
  }
  async wasteCollectionRequest<
    T extends Prisma.WasteCollectionRequestFindUniqueArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.WasteCollectionRequestFindUniqueArgs>
  ): Promise<PrismaWasteCollectionRequest | null> {
    return this.prisma.wasteCollectionRequest.findUnique(args);
  }
  async createWasteCollectionRequest<
    T extends Prisma.WasteCollectionRequestCreateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.WasteCollectionRequestCreateArgs>
  ): Promise<PrismaWasteCollectionRequest> {
    return this.prisma.wasteCollectionRequest.create<T>(args);
  }
  async updateWasteCollectionRequest<
    T extends Prisma.WasteCollectionRequestUpdateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.WasteCollectionRequestUpdateArgs>
  ): Promise<PrismaWasteCollectionRequest> {
    return this.prisma.wasteCollectionRequest.update<T>(args);
  }
  async deleteWasteCollectionRequest<
    T extends Prisma.WasteCollectionRequestDeleteArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.WasteCollectionRequestDeleteArgs>
  ): Promise<PrismaWasteCollectionRequest> {
    return this.prisma.wasteCollectionRequest.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.wasteCollectionRequest
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
