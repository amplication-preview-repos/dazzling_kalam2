/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { WasteCollectionRequest } from "./WasteCollectionRequest";
import { WasteCollectionRequestCountArgs } from "./WasteCollectionRequestCountArgs";
import { WasteCollectionRequestFindManyArgs } from "./WasteCollectionRequestFindManyArgs";
import { WasteCollectionRequestFindUniqueArgs } from "./WasteCollectionRequestFindUniqueArgs";
import { CreateWasteCollectionRequestArgs } from "./CreateWasteCollectionRequestArgs";
import { UpdateWasteCollectionRequestArgs } from "./UpdateWasteCollectionRequestArgs";
import { DeleteWasteCollectionRequestArgs } from "./DeleteWasteCollectionRequestArgs";
import { User } from "../../user/base/User";
import { WasteCollectionRequestService } from "../wasteCollectionRequest.service";
@graphql.Resolver(() => WasteCollectionRequest)
export class WasteCollectionRequestResolverBase {
  constructor(protected readonly service: WasteCollectionRequestService) {}

  async _wasteCollectionRequestsMeta(
    @graphql.Args() args: WasteCollectionRequestCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [WasteCollectionRequest])
  async wasteCollectionRequests(
    @graphql.Args() args: WasteCollectionRequestFindManyArgs
  ): Promise<WasteCollectionRequest[]> {
    return this.service.wasteCollectionRequests(args);
  }

  @graphql.Query(() => WasteCollectionRequest, { nullable: true })
  async wasteCollectionRequest(
    @graphql.Args() args: WasteCollectionRequestFindUniqueArgs
  ): Promise<WasteCollectionRequest | null> {
    const result = await this.service.wasteCollectionRequest(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => WasteCollectionRequest)
  async createWasteCollectionRequest(
    @graphql.Args() args: CreateWasteCollectionRequestArgs
  ): Promise<WasteCollectionRequest> {
    return await this.service.createWasteCollectionRequest({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => WasteCollectionRequest)
  async updateWasteCollectionRequest(
    @graphql.Args() args: UpdateWasteCollectionRequestArgs
  ): Promise<WasteCollectionRequest | null> {
    try {
      return await this.service.updateWasteCollectionRequest({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => WasteCollectionRequest)
  async deleteWasteCollectionRequest(
    @graphql.Args() args: DeleteWasteCollectionRequestArgs
  ): Promise<WasteCollectionRequest | null> {
    try {
      return await this.service.deleteWasteCollectionRequest(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(
    @graphql.Parent() parent: WasteCollectionRequest
  ): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
