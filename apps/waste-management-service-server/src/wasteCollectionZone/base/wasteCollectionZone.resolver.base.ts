/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { WasteCollectionZone } from "./WasteCollectionZone";
import { WasteCollectionZoneCountArgs } from "./WasteCollectionZoneCountArgs";
import { WasteCollectionZoneFindManyArgs } from "./WasteCollectionZoneFindManyArgs";
import { WasteCollectionZoneFindUniqueArgs } from "./WasteCollectionZoneFindUniqueArgs";
import { CreateWasteCollectionZoneArgs } from "./CreateWasteCollectionZoneArgs";
import { UpdateWasteCollectionZoneArgs } from "./UpdateWasteCollectionZoneArgs";
import { DeleteWasteCollectionZoneArgs } from "./DeleteWasteCollectionZoneArgs";
import { WasteCollectionZoneService } from "../wasteCollectionZone.service";
@graphql.Resolver(() => WasteCollectionZone)
export class WasteCollectionZoneResolverBase {
  constructor(protected readonly service: WasteCollectionZoneService) {}

  async _wasteCollectionZonesMeta(
    @graphql.Args() args: WasteCollectionZoneCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [WasteCollectionZone])
  async wasteCollectionZones(
    @graphql.Args() args: WasteCollectionZoneFindManyArgs
  ): Promise<WasteCollectionZone[]> {
    return this.service.wasteCollectionZones(args);
  }

  @graphql.Query(() => WasteCollectionZone, { nullable: true })
  async wasteCollectionZone(
    @graphql.Args() args: WasteCollectionZoneFindUniqueArgs
  ): Promise<WasteCollectionZone | null> {
    const result = await this.service.wasteCollectionZone(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => WasteCollectionZone)
  async createWasteCollectionZone(
    @graphql.Args() args: CreateWasteCollectionZoneArgs
  ): Promise<WasteCollectionZone> {
    return await this.service.createWasteCollectionZone({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => WasteCollectionZone)
  async updateWasteCollectionZone(
    @graphql.Args() args: UpdateWasteCollectionZoneArgs
  ): Promise<WasteCollectionZone | null> {
    try {
      return await this.service.updateWasteCollectionZone({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => WasteCollectionZone)
  async deleteWasteCollectionZone(
    @graphql.Args() args: DeleteWasteCollectionZoneArgs
  ): Promise<WasteCollectionZone | null> {
    try {
      return await this.service.deleteWasteCollectionZone(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
