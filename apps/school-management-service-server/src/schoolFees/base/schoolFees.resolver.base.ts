/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { SchoolFees } from "./SchoolFees";
import { SchoolFeesCountArgs } from "./SchoolFeesCountArgs";
import { SchoolFeesFindManyArgs } from "./SchoolFeesFindManyArgs";
import { SchoolFeesFindUniqueArgs } from "./SchoolFeesFindUniqueArgs";
import { CreateSchoolFeesArgs } from "./CreateSchoolFeesArgs";
import { UpdateSchoolFeesArgs } from "./UpdateSchoolFeesArgs";
import { DeleteSchoolFeesArgs } from "./DeleteSchoolFeesArgs";
import { Student } from "../../student/base/Student";
import { SchoolFeesService } from "../schoolFees.service";
@graphql.Resolver(() => SchoolFees)
export class SchoolFeesResolverBase {
  constructor(protected readonly service: SchoolFeesService) {}

  async _schoolFeesItemsMeta(
    @graphql.Args() args: SchoolFeesCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [SchoolFees])
  async schoolFeesItems(
    @graphql.Args() args: SchoolFeesFindManyArgs
  ): Promise<SchoolFees[]> {
    return this.service.schoolFeesItems(args);
  }

  @graphql.Query(() => SchoolFees, { nullable: true })
  async schoolFees(
    @graphql.Args() args: SchoolFeesFindUniqueArgs
  ): Promise<SchoolFees | null> {
    const result = await this.service.schoolFees(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => SchoolFees)
  async createSchoolFees(
    @graphql.Args() args: CreateSchoolFeesArgs
  ): Promise<SchoolFees> {
    return await this.service.createSchoolFees({
      ...args,
      data: {
        ...args.data,

        student: args.data.student
          ? {
              connect: args.data.student,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => SchoolFees)
  async updateSchoolFees(
    @graphql.Args() args: UpdateSchoolFeesArgs
  ): Promise<SchoolFees | null> {
    try {
      return await this.service.updateSchoolFees({
        ...args,
        data: {
          ...args.data,

          student: args.data.student
            ? {
                connect: args.data.student,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SchoolFees)
  async deleteSchoolFees(
    @graphql.Args() args: DeleteSchoolFeesArgs
  ): Promise<SchoolFees | null> {
    try {
      return await this.service.deleteSchoolFees(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Student, {
    nullable: true,
    name: "student",
  })
  async getStudent(
    @graphql.Parent() parent: SchoolFees
  ): Promise<Student | null> {
    const result = await this.service.getStudent(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
