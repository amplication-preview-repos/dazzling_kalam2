/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  SchoolFees as PrismaSchoolFees,
  Student as PrismaStudent,
} from "@prisma/client";

export class SchoolFeesServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.SchoolFeesCountArgs, "select">
  ): Promise<number> {
    return this.prisma.schoolFees.count(args);
  }

  async schoolFeesItems<T extends Prisma.SchoolFeesFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.SchoolFeesFindManyArgs>
  ): Promise<PrismaSchoolFees[]> {
    return this.prisma.schoolFees.findMany<Prisma.SchoolFeesFindManyArgs>(args);
  }
  async schoolFees<T extends Prisma.SchoolFeesFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.SchoolFeesFindUniqueArgs>
  ): Promise<PrismaSchoolFees | null> {
    return this.prisma.schoolFees.findUnique(args);
  }
  async createSchoolFees<T extends Prisma.SchoolFeesCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SchoolFeesCreateArgs>
  ): Promise<PrismaSchoolFees> {
    return this.prisma.schoolFees.create<T>(args);
  }
  async updateSchoolFees<T extends Prisma.SchoolFeesUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SchoolFeesUpdateArgs>
  ): Promise<PrismaSchoolFees> {
    return this.prisma.schoolFees.update<T>(args);
  }
  async deleteSchoolFees<T extends Prisma.SchoolFeesDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.SchoolFeesDeleteArgs>
  ): Promise<PrismaSchoolFees> {
    return this.prisma.schoolFees.delete(args);
  }

  async getStudent(parentId: string): Promise<PrismaStudent | null> {
    return this.prisma.schoolFees
      .findUnique({
        where: { id: parentId },
      })
      .student();
  }
}
