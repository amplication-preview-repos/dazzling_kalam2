/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { SchoolFeesService } from "../schoolFees.service";
import { SchoolFeesCreateInput } from "./SchoolFeesCreateInput";
import { SchoolFees } from "./SchoolFees";
import { SchoolFeesFindManyArgs } from "./SchoolFeesFindManyArgs";
import { SchoolFeesWhereUniqueInput } from "./SchoolFeesWhereUniqueInput";
import { SchoolFeesUpdateInput } from "./SchoolFeesUpdateInput";

export class SchoolFeesControllerBase {
  constructor(protected readonly service: SchoolFeesService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SchoolFees })
  async createSchoolFees(
    @common.Body() data: SchoolFeesCreateInput
  ): Promise<SchoolFees> {
    return await this.service.createSchoolFees({
      data: {
        ...data,

        student: data.student
          ? {
              connect: data.student,
            }
          : undefined,
      },
      select: {
        amount: true,
        createdAt: true,
        dueDate: true,
        id: true,
        status: true,

        student: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [SchoolFees] })
  @ApiNestedQuery(SchoolFeesFindManyArgs)
  async schoolFeesItems(@common.Req() request: Request): Promise<SchoolFees[]> {
    const args = plainToClass(SchoolFeesFindManyArgs, request.query);
    return this.service.schoolFeesItems({
      ...args,
      select: {
        amount: true,
        createdAt: true,
        dueDate: true,
        id: true,
        status: true,

        student: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SchoolFees })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async schoolFees(
    @common.Param() params: SchoolFeesWhereUniqueInput
  ): Promise<SchoolFees | null> {
    const result = await this.service.schoolFees({
      where: params,
      select: {
        amount: true,
        createdAt: true,
        dueDate: true,
        id: true,
        status: true,

        student: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SchoolFees })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateSchoolFees(
    @common.Param() params: SchoolFeesWhereUniqueInput,
    @common.Body() data: SchoolFeesUpdateInput
  ): Promise<SchoolFees | null> {
    try {
      return await this.service.updateSchoolFees({
        where: params,
        data: {
          ...data,

          student: data.student
            ? {
                connect: data.student,
              }
            : undefined,
        },
        select: {
          amount: true,
          createdAt: true,
          dueDate: true,
          id: true,
          status: true,

          student: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SchoolFees })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteSchoolFees(
    @common.Param() params: SchoolFeesWhereUniqueInput
  ): Promise<SchoolFees | null> {
    try {
      return await this.service.deleteSchoolFees({
        where: params,
        select: {
          amount: true,
          createdAt: true,
          dueDate: true,
          id: true,
          status: true,

          student: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
