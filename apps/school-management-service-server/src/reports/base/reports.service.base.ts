/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Reports as PrismaReports,
  Student as PrismaStudent,
} from "@prisma/client";

export class ReportsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ReportsCountArgs, "select">): Promise<number> {
    return this.prisma.reports.count(args);
  }

  async reportsItems<T extends Prisma.ReportsFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ReportsFindManyArgs>
  ): Promise<PrismaReports[]> {
    return this.prisma.reports.findMany<Prisma.ReportsFindManyArgs>(args);
  }
  async reports<T extends Prisma.ReportsFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ReportsFindUniqueArgs>
  ): Promise<PrismaReports | null> {
    return this.prisma.reports.findUnique(args);
  }
  async createReports<T extends Prisma.ReportsCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ReportsCreateArgs>
  ): Promise<PrismaReports> {
    return this.prisma.reports.create<T>(args);
  }
  async updateReports<T extends Prisma.ReportsUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ReportsUpdateArgs>
  ): Promise<PrismaReports> {
    return this.prisma.reports.update<T>(args);
  }
  async deleteReports<T extends Prisma.ReportsDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ReportsDeleteArgs>
  ): Promise<PrismaReports> {
    return this.prisma.reports.delete(args);
  }

  async getStudent(parentId: string): Promise<PrismaStudent | null> {
    return this.prisma.reports
      .findUnique({
        where: { id: parentId },
      })
      .student();
  }
}
