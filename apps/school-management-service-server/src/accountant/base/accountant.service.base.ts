/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Accountant as PrismaAccountant } from "@prisma/client";

export class AccountantServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AccountantCountArgs, "select">
  ): Promise<number> {
    return this.prisma.accountant.count(args);
  }

  async accountants<T extends Prisma.AccountantFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.AccountantFindManyArgs>
  ): Promise<PrismaAccountant[]> {
    return this.prisma.accountant.findMany<Prisma.AccountantFindManyArgs>(args);
  }
  async accountant<T extends Prisma.AccountantFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.AccountantFindUniqueArgs>
  ): Promise<PrismaAccountant | null> {
    return this.prisma.accountant.findUnique(args);
  }
  async createAccountant<T extends Prisma.AccountantCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AccountantCreateArgs>
  ): Promise<PrismaAccountant> {
    return this.prisma.accountant.create<T>(args);
  }
  async updateAccountant<T extends Prisma.AccountantUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AccountantUpdateArgs>
  ): Promise<PrismaAccountant> {
    return this.prisma.accountant.update<T>(args);
  }
  async deleteAccountant<T extends Prisma.AccountantDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.AccountantDeleteArgs>
  ): Promise<PrismaAccountant> {
    return this.prisma.accountant.delete(args);
  }
}
