/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Accountant } from "./Accountant";
import { AccountantCountArgs } from "./AccountantCountArgs";
import { AccountantFindManyArgs } from "./AccountantFindManyArgs";
import { AccountantFindUniqueArgs } from "./AccountantFindUniqueArgs";
import { CreateAccountantArgs } from "./CreateAccountantArgs";
import { UpdateAccountantArgs } from "./UpdateAccountantArgs";
import { DeleteAccountantArgs } from "./DeleteAccountantArgs";
import { AccountantService } from "../accountant.service";
@graphql.Resolver(() => Accountant)
export class AccountantResolverBase {
  constructor(protected readonly service: AccountantService) {}

  async _accountantsMeta(
    @graphql.Args() args: AccountantCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Accountant])
  async accountants(
    @graphql.Args() args: AccountantFindManyArgs
  ): Promise<Accountant[]> {
    return this.service.accountants(args);
  }

  @graphql.Query(() => Accountant, { nullable: true })
  async accountant(
    @graphql.Args() args: AccountantFindUniqueArgs
  ): Promise<Accountant | null> {
    const result = await this.service.accountant(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Accountant)
  async createAccountant(
    @graphql.Args() args: CreateAccountantArgs
  ): Promise<Accountant> {
    return await this.service.createAccountant({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Accountant)
  async updateAccountant(
    @graphql.Args() args: UpdateAccountantArgs
  ): Promise<Accountant | null> {
    try {
      return await this.service.updateAccountant({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Accountant)
  async deleteAccountant(
    @graphql.Args() args: DeleteAccountantArgs
  ): Promise<Accountant | null> {
    try {
      return await this.service.deleteAccountant(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
