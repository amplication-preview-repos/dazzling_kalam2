/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AccountantService } from "../accountant.service";
import { AccountantCreateInput } from "./AccountantCreateInput";
import { Accountant } from "./Accountant";
import { AccountantFindManyArgs } from "./AccountantFindManyArgs";
import { AccountantWhereUniqueInput } from "./AccountantWhereUniqueInput";
import { AccountantUpdateInput } from "./AccountantUpdateInput";

export class AccountantControllerBase {
  constructor(protected readonly service: AccountantService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Accountant })
  async createAccountant(
    @common.Body() data: AccountantCreateInput
  ): Promise<Accountant> {
    return await this.service.createAccountant({
      data: data,
      select: {
        createdAt: true,
        email: true,
        id: true,
        password: true,
        updatedAt: true,
        username: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Accountant] })
  @ApiNestedQuery(AccountantFindManyArgs)
  async accountants(@common.Req() request: Request): Promise<Accountant[]> {
    const args = plainToClass(AccountantFindManyArgs, request.query);
    return this.service.accountants({
      ...args,
      select: {
        createdAt: true,
        email: true,
        id: true,
        password: true,
        updatedAt: true,
        username: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Accountant })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async accountant(
    @common.Param() params: AccountantWhereUniqueInput
  ): Promise<Accountant | null> {
    const result = await this.service.accountant({
      where: params,
      select: {
        createdAt: true,
        email: true,
        id: true,
        password: true,
        updatedAt: true,
        username: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Accountant })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAccountant(
    @common.Param() params: AccountantWhereUniqueInput,
    @common.Body() data: AccountantUpdateInput
  ): Promise<Accountant | null> {
    try {
      return await this.service.updateAccountant({
        where: params,
        data: data,
        select: {
          createdAt: true,
          email: true,
          id: true,
          password: true,
          updatedAt: true,
          username: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Accountant })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAccountant(
    @common.Param() params: AccountantWhereUniqueInput
  ): Promise<Accountant | null> {
    try {
      return await this.service.deleteAccountant({
        where: params,
        select: {
          createdAt: true,
          email: true,
          id: true,
          password: true,
          updatedAt: true,
          username: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
